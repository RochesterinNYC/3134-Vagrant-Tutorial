{"name":"3134-vagrant-tutorial","tagline":"Vagrant Tutorial/Notes for 3134: Data Structures in Java","body":"<header style=\"width:100%; display:block; height: 50px;\">\r\nTest\r\n</header>\r\nVagrant Tutorial\r\n---\r\n####3134 - Data Structures in Java \r\n-------\r\n\r\nThe following is a tutorial/notes on how to use Vagrant to create and manage VMs for 3134: Data Structures in Java. We will be using VMs in this class to standardize the development environment of the students as well as the testing environment for the TAs and Professor Blaer.\r\n\r\n-------\r\n\r\n###Terms:\r\n\r\n####Virtual Machine (VM)\r\n-\r\n\r\n####Vagrant\r\n- Wrapper for virtualbox operations and VM creation, configuration, management, etc.\r\n\r\n####Virtualbox\r\n- Virtualization software that \r\n\r\n####Box\r\n\r\n####Vagrantfile\r\n\r\n####Shared Folder\r\n\r\n------\r\n\r\n###Installation:\r\n\r\n####Vagrant:\r\n\r\n<a href=\"https://www.vagrantup.com/downloads\" target=\"_blank\">Vagrant Downloads</a>\r\n\r\n####Virtualbox:\r\n\r\n<a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\">Virtual Downloads</a>\r\n\r\nSelect downloads for appropriate OS.\r\n\r\n------\r\n\r\n###Setup:\r\n\r\n####Setting up Box:\r\n\r\n\\- Download package.box\r\n\r\n\\- Go to directory containing package.box\r\n\r\n\\- Run box add command:\r\n\r\n    vagrant box add [boxFile] --name [BoxName]\r\n\r\nEx:\r\n \r\n    vagrant box add package.box --name 3134Box\r\n\r\n3134Box is now the name of your box.\r\n\r\n####Setting up Vagrantfile:\r\n\r\n\\- Initialize vagrantfile\r\n\r\n    vagrant init\r\n\r\n\\- Open the newly created Vagrantfile with a text editor and add the following lines of code at the bottom:\r\n\r\nThis specifies which box the VM to launch should use:\r\n\r\n    config.vm.box = \"3134Box\"\r\n\r\nThis allows for the GUI (if the box is set up with one) to appear:\r\n\r\n    config.vm.provider \"virtualbox\" do |vb|\r\n      vb.gui = true\r\n    end\r\n\r\n------\r\n\r\n###Starting your VM:\r\n\r\n\\- Go to the directory that contains your Vagrantfile.\r\n\\- Run the following:\r\n\r\n    vagrant up\r\n\r\n####Shared Folders:\r\n\r\nThe directory that you launched the VM from on your machine\r\nwill be the the same as \r\n    \r\n    /vagrant/ \r\n\r\non the virtual machine. All data is shared between the two without any VM restart necessary.\r\n\r\n------\r\n\r\n###Shutting Down the VM:\r\n\r\n<a href=\"https://docs.vagrantup.com/v2/getting-started/teardown.html\" target=\"_blank\">Vagrant Teardown</a>\r\n\r\n####From Your Machine:\r\n\r\nSuspend: Saves your VM's disk storage and state. Analogous to closing your laptop hood/hibernating.\r\n\r\n    vagrant suspend\r\n\r\nHalt: Saves your VM's disk storage but not state. Analogous to shutting down your laptop. \r\n\r\n    vagrant halt\r\n\r\nHalt: Does not save your VM's disk storage or state. Removes all traces of your VM from your machine. Analogous to destroying your laptop. \r\n\r\n    vagrant destroy\r\n\r\nNote: Way to start the VM after any of these is still\r\n\r\n    vagrant up\r\n\r\nThough different things happen and load times will vary.\r\nFrom fastest to slowest: vagrant suspend, vagrant halt, vagrant destroy\r\n\r\n####From Inside VM:\r\n\r\n(Similar to vagrant halt)\r\n\r\n    shutdown -h [time]\r\n\r\nEx.\r\n\r\n    shutdown -h now\r\n\r\n------\r\n\r\n###Example Workflow:\r\n\r\n- Create hw/project directory.\r\n- Either:\r\n  - Initialize Vagrantfile and configure appropriately\r\n  - Copy already configured Vagrantfile\r\n- Start the VM with vagrant up\r\n- Create/edit .java files in whichever machine with whichever text editor\r\nEither:\r\n  - SSH into the VM with vagrant ssh\r\n  - Work within the GUI of the VM\r\n- Compile, run, and test (make sure you're running these in the VM to ensure compatibility with TA/Professor grading/testing environment)\r\n- when done with programming session or hw, shut down with vagrant suspend, halt, or destroy\r\n\r\n- Once vagrant and virtualbox are installed, box is added, then all you need to do to boot VMs is vagrant up with a Vagrantfile in directory.\r\nvagrant up in subdirectories is also possible: link\r\n------\r\n\r\n###Useful Vagrant commands:\r\n\r\n<a href=\"https://docs.vagrantup.com/v2/cli/index.html\" target=\"_blank\">Vagrant Command Line Interface</a>\r\n\r\nList all added boxes:\r\n \r\n    vagrant box list\r\n\r\nInitialize new vagrant file:\r\n\r\n    vagrant init\r\n\r\nStart VM:\r\n \r\n    vagrant up\r\n\r\nAdd a box:\r\n\r\n    vagrant box add [boxFile] --name [BoxName]\r\n\r\nSSH into VM:\r\n\r\n    vagrant ssh\r\n\r\nSuspend VM:\r\n\r\n    vagrant suspend\r\n\r\nShutdown VM:\r\n\r\n    vagrant halt\r\n\r\nDestroy VM:\r\n    \r\n    vagrant destroy\r\n\r\ntalk about .vagrant directory\r\n\r\n    Bringing machine 'default' up with 'virtualbox' provider...\r\n    ==> default: Importing base box '3134Box'...\r\n    ==> default: Matching MAC address for NAT networking...\r\n    ==> default: Setting the name of the VM: Vagrant_default_1410852242789_98187\r\n    ==> default: Clearing any previously set network interfaces...\r\n    ==> default: Preparing network interfaces based on configuration...\r\n        default: Adapter 1: nat\r\n    ==> default: Forwarding ports...\r\n        default: 22 => 2222 (adapter 1)\r\n    ==> default: Booting VM...\r\n    ==> default: Waiting for machine to boot. This may take a few minutes...\r\n        default: SSH address: 127.0.0.1:2222\r\n        default: SSH username: vagrant\r\n        default: SSH auth method: private key\r\n        default: Warning: Connection timeout. Retrying...\r\n        default: Warning: Connection timeout. Retrying...\r\n        default: Warning: Connection timeout. Retrying...\r\n        default: Warning: Connection timeout. Retrying...\r\n        default: Warning: Remote connection disconnect. Retrying...\r\n    ==> default: Machine booted and ready!\r\n    ==> default: Checking for guest additions in VM...\r\n    ==> default: Mounting shared folders...\r\n        default: /vagrant => /Users/Rochester/Documents/3134-TA-Fall-2014/Vagrant\r\n\r\n\r\n        dyn-160-39-228-106:Vagrant Rochester$ make\r\n        javac -g OSPrint.java\r\n        dyn-160-39-228-106:Vagrant Rochester$ make run\r\n        java OSPrint\r\n        This machine is running with the following properties:\r\n        Operating System: Mac OS X 10.9.4\r\n        Java Version: 1.7.0_67\r\n        Architecture: x86_64\r\n        User: Rochester\r\n        Java Home Directory: /Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home/jre\r\n\r\n        vagrant@base2:/vagrant$ make\r\n        make: Nothing to be done for `default'.\r\n        vagrant@base2:/vagrant$ make run\r\n        java OSPrint\r\n        This machine is running with the following properties:\r\n        Operating System: Linux 3.13.0-35-generic\r\n        Java Version: 1.7.0_65\r\n        Architecture: amd64\r\n        User: vagrant\r\n        Java Home Directory: /usr/lib/jvm/java-7-openjdk-amd64/jre\r\n\r\n\r\n        - Notice that the make on the VM produces the \"make: Nothing to be done for `default'.\" message because the java files were already compiled on your machine and the directory is shared so the .class files are already present when make is ran on the VM.\r\n        - Notice the different operating systems, java version, where java is located, and the user names.\r\n        - Architecture is actually the same (x86_64 and amd64 are just different names for same architecture)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
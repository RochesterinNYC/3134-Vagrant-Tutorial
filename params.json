{"name":"3134 - Data Structures in Java: Vagrant Tutorial/Notes","tagline":"Vagrant Tutorial/Notes for 3134: Data Structures in Java","body":"[Vagrant Tutorial](http://rochesterinnyc.github.io/3134-Vagrant-Tutorial/)\r\n---\r\n####3134 - Data Structures in Java \r\n-------\r\n\r\nThis a tutorial on how to use Vagrant to create and manage virtual machines (VMs) for 3134: Data Structures in Java. We will be using VMs in this class to standardize the development environment of the students as well as the testing environment for the TAs and Professor Blaer regarding homework assignments.\r\n\r\n-------\r\n\r\n###Table of Contents\r\n\r\n- [Terms/Definitions](#terms)\r\n- [Installation](#installation)\r\n- [Initial Setup](#setup)\r\n- [Starting the VM](#start)\r\n- [Shutting Down the VM](#shutdown)\r\n- [Example Workflow](#workflow)\r\n- [Useful Commands](#commands)\r\n- [Demo](#demo)\r\n- [Other Notes](#other)\r\n- [References/Documentation](#docs)\r\n\r\n-------\r\n\r\n<a name=\"terms\"></a>\r\n\r\n###Term Definitions:\r\n\r\n####Virtual Machine (VM)\r\n- Implementation/Simulation of a machine through software\r\n- \"Computer within a computer\"\r\n\r\n####Vagrant\r\n- Wrapper for virtualbox operations and VM creation, configuration, management, etc.\r\n\r\n####Virtualbox\r\n- Virtualization software that can create and manage Virtual Machines on your machine running a variety of different operating systems and software\r\n\r\n####Box\r\n- Package format for Vagrant environments that includes information like system settings, software, runtime environments, etc.\r\n\r\n####Vagrantfile\r\n- Configuration file that describes the virtual machine and how to configure/provision them\r\n- Written in Ruby (but you don't need to really know Ruby to write/edit them)\r\n\r\n####Shared Folder\r\n- A folder/directory that is shared between different machines\r\n- Ex. a directory shared between your laptop and the virtual machine it's running\r\n\r\n------\r\n\r\n<a name=\"installation\"></a>\r\n\r\n###Installation:\r\n\r\n####Vagrant:\r\n\r\n<a href=\"https://www.vagrantup.com/downloads\" target=\"_blank\">Vagrant Downloads</a>\r\n\r\n####Virtualbox:\r\n\r\n<a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\">Virtual Downloads</a>\r\n\r\nSelect downloads for appropriate OS. Install the appropriate packages/software for your OS.\r\n\r\n------\r\n\r\n<a name=\"setup\"></a>\r\n\r\n###Setup:\r\n\r\n####Setting up a Box:\r\n\r\nThe box was created by Professor Cannon and details the standardized environment that the 1004 and 3134 classes will be using.\r\nThe box was modified by James Wen to include vim and emacs.\r\n\r\nDetails:\r\n\r\n- Ubuntu 14.04 with Desktop\r\n- Openjdk7, Eclipse, and Gimp installed\r\n- Text Editors: Vim and emacs\r\n\r\n\\- Get 3134-VM.box file from a 3134 distributed USB flash drive or from Professor Blaer's website when it's up\r\n\r\n\\- Go to directory containing 3134-VM.box\r\n\r\n\\- Run box add command:\r\n\r\n    vagrant box add [boxFile] --name [boxName]\r\n\r\nEx:\r\n \r\n    vagrant box add 3134-VM.box --name 3134Box\r\n\r\n3134Box is now the name of your box.\r\n\r\n\\- Note: Expect running this command to take a while.\r\n\r\n####Setting up Vagrantfile:\r\n\r\n\\- Initialize vagrantfile\r\n\r\n    vagrant init\r\n\r\n\\- Open the newly created Vagrantfile with a text editor and add the following lines of code at the bottom (above the \"end\" line):\r\n\r\nThis specifies which box the VM to launch should use:\r\n\r\n    config.vm.box = \"3134Box\"\r\n\r\nThis allows for the GUI (if the box is set up with one) to appear:\r\n\r\n    config.vm.provider \"virtualbox\" do |vb|\r\n      vb.gui = true\r\n    end\r\n\r\n------\r\n\r\n<a name=\"start\"></a>\r\n\r\n###Starting your VM:\r\n\r\n\\- Go to the directory that contains your Vagrantfile.\r\n\r\n\\- Run the following:\r\n\r\n    vagrant up\r\n\r\n\\- Note: Running this command without having any VM suspended or halted will take a while to boot up the VM.\r\n\r\n####Shared Folders:\r\n\r\nThe directory that you launched the VM from on your machine will be the the same as \r\n    \r\n    /vagrant/ \r\n\r\non the virtual machine. All data is shared between the two without any VM restart necessary.\r\n\r\n------\r\n\r\n<a name=\"shutdown\"></a>\r\n\r\n###Shutting Down the VM:\r\n\r\n<a href=\"https://docs.vagrantup.com/v2/getting-started/teardown.html\" target=\"_blank\">Vagrant Teardown</a>\r\n\r\n####From Your Machine:\r\n\r\nSuspend: Saves your VM's disk storage and state. Analogous to closing your laptop hood/hibernating.\r\n\r\n    vagrant suspend\r\n\r\nHalt: Saves your VM's disk storage but not state. Analogous to shutting down your laptop. \r\n\r\n    vagrant halt\r\n\r\nHalt: Does not save your VM's disk storage or state. Removes all traces of your VM from your machine. Analogous to destroying your laptop. \r\n\r\n    vagrant destroy\r\n\r\nNote: The command to start the VM after any of these is still\r\n\r\n    vagrant up\r\n\r\nThough different things happen and load times will vary.\r\nFrom fastest to slowest: vagrant suspend, vagrant halt, vagrant destroy\r\n\r\n####From Inside VM:\r\n\r\n(Similar to vagrant halt)\r\n\r\n    shutdown -h [time]\r\n\r\nEx.\r\n\r\n    shutdown -h now\r\n\r\n------\r\n\r\n<a name=\"workflow\"></a>\r\n\r\n###Example Workflow:\r\n\r\n- Create hw/project directory.\r\n- Either:\r\n  - Initialize Vagrantfile and configure appropriately\r\n  - Copy already configured Vagrantfile\r\n- Start the VM with vagrant up\r\n- Create/edit .java files in whichever machine with whichever text editor\r\nEither:\r\n  - SSH into the VM with vagrant ssh\r\n  - Work within the GUI of the VM\r\n- Compile, run, and test (make sure you're running these in the VM to ensure compatibility with TA/Professor grading/testing environment)\r\n- When done with programming session or hw, shut down VM with vagrant suspend, halt, or destroy\r\n\r\n- Note: Once vagrant and virtualbox are installed and the box is added, then all you need to do to boot VMs is vagrant up with a Vagrantfile in directory.\r\n- Note: Running vagrant up in subdirectories is also possible: <a href=\"https://docs.vagrantup.com/v2/vagrantfile/index.html\" target=\"_blank\">Vagrantfile Command Lookup path</a>\r\n\r\n------\r\n\r\n<a name=\"commands\"></a>\r\n\r\n###Useful Vagrant commands:\r\n\r\n<a href=\"https://docs.vagrantup.com/v2/cli/index.html\" target=\"_blank\">Vagrant Command Line Interface</a>\r\n\r\nList all added boxes:\r\n \r\n    vagrant box list\r\n\r\nInitialize new vagrant file:\r\n\r\n    vagrant init\r\n\r\nStart VM:\r\n \r\n    vagrant up\r\n\r\nAdd a box:\r\n\r\n    vagrant box add [boxFile] --name [BoxName]\r\n\r\nSSH into VM:\r\n\r\n    vagrant ssh\r\n\r\nSuspend VM:\r\n\r\n    vagrant suspend\r\n\r\nShutdown VM:\r\n\r\n    vagrant halt\r\n\r\nDestroy VM:\r\n    \r\n    vagrant destroy\r\n\r\n------\r\n\r\n<a name=\"demo\"></a>\r\n\r\n###OSPrint Demo:\r\n\r\n- Clone this repo <a href=\"https://github.com/RochesterinNYC/3134-Vagrant-Tutorial\">repo</a>, install and setup your Vagrant, Virtualbox, and Vagrantfile.\r\n- Start up your VM.\r\n- Run the OSPrint Java program on your local machine and your virtual machine and observe the differences in output.\r\n\r\nExample:\r\n\r\n        dyn-160-39-228-106:Vagrant Rochester$ make\r\n        javac -g OSPrint.java\r\n        dyn-160-39-228-106:Vagrant Rochester$ make run\r\n        java OSPrint\r\n        This machine is running with the following properties:\r\n        Operating System: Mac OS X 10.9.4\r\n        Java Version: 1.7.0_67\r\n        Architecture: x86_64\r\n        User: Rochester\r\n        Java Home Directory: /Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home/jre\r\n\r\n        vagrant@base2:/vagrant$ make\r\n        make: Nothing to be done for `default'.\r\n        vagrant@base2:/vagrant$ make run\r\n        java OSPrint\r\n        This machine is running with the following properties:\r\n        Operating System: Linux 3.13.0-35-generic\r\n        Java Version: 1.7.0_65\r\n        Architecture: amd64\r\n        User: vagrant\r\n        Java Home Directory: /usr/lib/jvm/java-7-openjdk-amd64/jre\r\n\r\n- Notice that the make on the VM produces the \"make: Nothing to be done for `default'.\" message because the java files were already compiled on your machine and the directory is shared so the .class files are already present when make is ran on the VM.\r\n- Notice the different operating systems, java version, where java is located, and the user names.\r\n- Architecture is actually the same (x86_64 and amd64 are just different names for same architecture)\r\n\r\n------\r\n\r\n<a name=\"other\"></a>\r\n\r\n###Other Notes:\r\n\r\n- If you idle for too long or encounter the Ubuntu login screen (should say CS@CU), the password will be \"vagrant\" as this is the default password set by Vagrant.\r\n- Please do not submit Vagrantfiles for your assignments, and **especially do not submit box files**.\r\n\r\n------\r\n\r\n<a name=\"docs\"></a>\r\n\r\n###References/Documentation:\r\n\r\n<a href=\"https://docs.vagrantup.com/v2/\">Vagrant</a>\r\n\r\n<a href=\"https://www.virtualbox.org/wiki/Documentation\">Virtualbox</a>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}